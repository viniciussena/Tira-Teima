// Definição do parser para arquivos de instruções Tira Teima.

options {
	STATIC = false;
	LOOKAHEAD = 3;
	FORCE_LA_CHECK = true;
}

PARSER_BEGIN(TiraTeimaParser)

package tirateima.parser;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Stack;

import tirateima.controlador.Controlador;
import tirateima.controlador.Command;
import tirateima.controlador.Operador;

import tirateima.controlador.CommandAttribution;
import tirateima.controlador.CommandJump;
import tirateima.controlador.CommandConditionalJump;
import tirateima.controlador.CommandNewType;
import tirateima.controlador.CommandNewVar;
import tirateima.controlador.CommandNewVarText;
import tirateima.controlador.CommandDirectPointer;
import tirateima.controlador.CommandReadInput;
import tirateima.controlador.FunctionDeclaration;
import tirateima.controlador.CommandStartFunction;
import tirateima.controlador.CommandEndFunction;
import tirateima.controlador.CommandOperationCall;
import tirateima.controlador.CommandInsertText;
import tirateima.controlador.Index;
import tirateima.controlador.Step;
import tirateima.controlador.Type;
import tirateima.controlador.TypeId;
import tirateima.controlador.VarDefinition;

public class TiraTeimaParser {

	/** Trata a string caractere a caractere, e troca as substrings de caracteres de escape 
	*	por apenas um caractere de escape
	*	@param s A string a ser tratada
	*	@return Uma nova string com os caracteres que necessitam de tratamento já tratados
	*/
	private String tratarString(String s) {
		char chars[] = s.toCharArray();
		StringBuffer buffer = new StringBuffer();
		
		//ignora as aspas
		int lim = chars.length - 1;
		for(int i = 1; i < lim; i++) {
			if (chars[i] == '\\') {
				switch (chars[++i]) {
					case '\\':
						buffer.append('\\');
						break;
					case 't':
						buffer.append('\t');
						break;
					case 'n':
						buffer.append('\n');
						break;
					case 'r':
						buffer.append('\r');
						break;
					case '"':
						buffer.append('"');
						break;
				}
			} else {
				buffer.append(chars[i]);
			}
		}
		
		return buffer.toString();
	}
	
	/** Trata uma string que seja um caractere, trocando as o valor por um caracteres de 
	*		escape, se necessário
	*	@param s A string a ser tratada como um caractere
	*	@return Um novo caractere já tratado, caso tenha sido encontrado um literal
	*/
	private Character tratarChar(String s) {
		char chars[] = s.toCharArray();
		
		//ignora as aspas
		char c = chars[1];
		if (c == '\\') {
			switch (chars[2]) {
				case '\\':
					c = '\\';
					break;
				case 't':
					c = '\t';
					break;
				case 'n':
					c = '\n';
					break;
				case 'r':
					c = '\r';
					break;
				case '\'':
					c = '\'';
					break;
			}
		}
		
		return new Character(c);
	}
}
PARSER_END(TiraTeimaParser)

/** Um passo é uma indicação de linha seguida de um comando com ou sem label:
*	[line] <nro linha> [label] <comando> 
*/
Step step() : {
	Token nroLinha;
	Step p;
}
{
	(
		(<KW_LINE>)?
		(nroLinha = <INT_NUMBER>){p = new Step(Integer.parseInt(nroLinha.image));}
		(label(p))?
		command(p){return p;}
	) |
	(
		<EOF>{return null;}
	)
}

/**	Um comando é um dos comandos básicos ou é um bloco de comandos
*	@param p Um Step
*/
void command(Step p) : {}
{
	<SEMICOLON> |
	cmd_new_type(p) |
	cmd_new_var(p) |
	cmd_atrib(p) |
	cmd_direct_pointer(p) |
	cmd_new_file(p) |
	cmd_jump(p) |
	cmd_conditional_jump(p)|
	cmd_read(p) |
	function_declaration(p) |
	function_start(p) |
	function_end(p) |
	operation_call(p) |
	cmd_insert_text(p) |
	bloco(p)
}

/** Adiciona um label ao passo caso caso exista */
void label(Step p) :
{
	Token label;
}
{
	(label = <IDENTIFIER>) {p.label = label.image;}
	<COLON>
}

void cmd_read(Step p) :
{	Stack<Object> var_stack = new Stack<Object>();	
}
{	<KW_READ_FROM_USER>
	<OPEN_PAR>
	variavel(var_stack) 
	<CLOSE_PAR>
	<SEMICOLON>	{p.addCommand(new CommandReadInput(var_stack));}
}

/**
 * Cria um comando de jump condicional e o coloca na lista de passos. Esse comando ativa
 * a avaliação de expressões em tempo de execução do código de modo que ele executará o
 * desvio se a expressão avaliada for verdadeira.
 */
void cmd_conditional_jump(Step p) :
{	Stack<Object> pilhaSimbolos = new Stack<Object>();
	Token label;
}
{	<KW_IF>
	<OPEN_PAR>
	expression(pilhaSimbolos)
	<CLOSE_PAR>
	<KW_GOTO>
	<OPEN_PAR>
	(label = <IDENTIFIER>)	{
	  p.addCommand(new CommandConditionalJump(label.image,pilhaSimbolos));	}
	<CLOSE_PAR>
	<SEMICOLON>
}

/**
 * Executa o parse de uma expressão. Coloca cada símbolo encontrado em uma
 * pilha para ser computada em tempo de execução. Para tanto, foi utilizada
 * uma gramática reduzida baseada na gramática do C, a qual encontra-se no
 * arquivo C.jj deste projeto. Ele utiliza a mesma sintaxe, porém com menos
 * possiblidades, o que poderá ser acrescentado de acordo com os requisitos
 * da evolução do Tira-Teima.
 *
 * @param Stack<Object> pilha de símbolos para receber cada valor lido.
 */
void expression(Stack<Object> pilhaSimbolos) : {}
{	AssignmentExpression(pilhaSimbolos)
}

void AssignmentExpression(Stack<Object> pilhaSimbolos) : {}
{
	  LOOKAHEAD(UnaryExpression(pilhaSimbolos) AssignmentOperator(pilhaSimbolos)) UnaryExpression(pilhaSimbolos) AssignmentOperator(pilhaSimbolos) AssignmentExpression(pilhaSimbolos) |
	  LOOKAHEAD(3) ConditionalExpression(pilhaSimbolos)
}

void UnaryExpression(Stack<Object> pilhaSimbolos) : {}
{
	LOOKAHEAD(3) PrimaryExpression(pilhaSimbolos) |
	UnaryOperator(pilhaSimbolos) UnaryExpression(pilhaSimbolos)
}

void AssignmentOperator(Stack<Object> pilhaSimbolos) : {}
{
	<ATTRIBUTION> {pilhaSimbolos.push(Operador.ASSIGN);}
}

void ConditionalExpression(Stack<Object> pilhaSimbolos) : {}
{
	LogicalORExpression(pilhaSimbolos)
}

void UnaryOperator(Stack<Object> pilhaSimbolos) : {}
{
	<NOT_OP> {pilhaSimbolos.push(Operador.NOT_OP);}
}

void PrimaryExpression(Stack<Object> pilhaSimbolos) :
{
	Stack<Object> var_stack = new Stack<Object>();
	Object constante;
}
{
	variavel(var_stack) {pilhaSimbolos.push(var_stack);}      |
	(constante = constant()) {pilhaSimbolos.push(constante);} |
	<OPEN_PAR> {pilhaSimbolos.push(Operador.OPEN_PAR);}
	expression(pilhaSimbolos)
	<CLOSE_PAR> {pilhaSimbolos.push(Operador.CLOSE_PAR);}
}

void LogicalORExpression(Stack<Object> pilhaSimbolos) : {}
{
	LogicalANDExpression(pilhaSimbolos)
	[ <OR_OP> {pilhaSimbolos.push(Operador.OR_OP);}
		LogicalORExpression(pilhaSimbolos)
	]
}

void LogicalANDExpression(Stack<Object> pilhaSimbolos) : {}
{
	EqualityExpression(pilhaSimbolos)
	[ <AND_OP> {pilhaSimbolos.push(Operador.AND_OP);}
		LogicalANDExpression(pilhaSimbolos)
	]
}

void EqualityExpression(Stack<Object> pilhaSimbolos) : {}
{
	RelationalExpression(pilhaSimbolos)
	[
		(<EQ_OP> {pilhaSimbolos.push(Operador.EQ_OP);}|
		 <NE_OP> {pilhaSimbolos.push(Operador.NE_OP);})
		EqualityExpression(pilhaSimbolos)
	]
}

void RelationalExpression(Stack<Object> pilhaSimbolos) : {}
{
	AdditiveExpression(pilhaSimbolos)
	[
		(<LT_OP> {pilhaSimbolos.push(Operador.LT_OP);}|
		 <GT_OP> {pilhaSimbolos.push(Operador.GT_OP);}|
		 <LE_OP> {pilhaSimbolos.push(Operador.LE_OP);}|
		 <GE_OP> {pilhaSimbolos.push(Operador.GE_OP);})
		RelationalExpression(pilhaSimbolos)
	]
}

void AdditiveExpression(Stack<Object> pilhaSimbolos) : {}
{
	MultiplicativeExpression(pilhaSimbolos)
	[
		(<ADD_OP> {pilhaSimbolos.push(Operador.ADD_OP);}|
		 <SUB_OP> {pilhaSimbolos.push(Operador.SUB_OP);})
		AdditiveExpression(pilhaSimbolos)
	]
}

void MultiplicativeExpression(Stack<Object> pilhaSimbolos) : {}
{
	UnaryExpression(pilhaSimbolos)
	[
		(<MULT_OP> {pilhaSimbolos.push(Operador.MULT_OP);}|
		 <DIV_OP>  {pilhaSimbolos.push(Operador.DIV_OP);}|
		 <MOD_OP>  {pilhaSimbolos.push(Operador.MOD_OP);})
		MultiplicativeExpression(pilhaSimbolos)
	]
}

/**
*   Cria um comando de jump incondicional e o insere na lista de passos. O comando jump faz com que se vá
*   para um estado que não necessáriamente é o próximo da lista. Procura-se, então, o passo
*   que possui um determinado label associado e o fluxo de execução recomeça a partir dele.
*
*   Essa estrutura se parece com os jumps do assembly ou com os goto de algumas linguagens.
* 
*   Esse jump pode ser de dois tipos:
*   - JUMP CONDICIONAL: vai para o passo com um determinado label se uma condição for tida.
*   - JUMP INCONDICIONAL: vai para o passo com um label determinado independente de qualquer
*     condição.
*/
void cmd_jump(Step p) :
{
    Token label;
}
{
	<KW_GOTO>
	<OPEN_PAR>
	(label = <IDENTIFIER>)
	{
		p.addCommand(new CommandJump(label.image));
	}
	<CLOSE_PAR>
	<SEMICOLON>
}

/**
*Insere um texto de um determinado tamanho em uma dada posição
*/
void cmd_insert_text(Step p) :
{
	String conteudo;
	Point posicao;
	Integer tamanho;
	
}
{
	<KW_INSERE_TEXTO>
	(conteudo = conteudo())
	(tamanho = font_size())
	(posicao = posicao())
	<SEMICOLON>	
	{
		p.addCommand(new CommandInsertText(conteudo,tamanho,posicao));
	}
}

/**	Cria um novo tipo, criando uma lista com as variáveis que compõem este tipo
*	@param p Um Step
*/
void cmd_new_type(Step p) : {
	Token t_name;
	String name;
	List<VarDefinition> aux, fields;
}
{
	<KW_RECORD> {fields = new ArrayList<VarDefinition>();}
	(t_name = <IDENTIFIER>) {name = t_name.image;}
	<OPEN_BRACE>
	(
		aux = new_vars()
		{fields.addAll(aux);}
	)+
	<CLOSE_BRACE> {
		 p.addCommand(new CommandNewType(name, fields));
	}
}

/**	Gera um objeto list de VarDefinition's com as variáveis solicitadas
*	@return Uma lista com as N variáveis solicitadas.
*/
List<VarDefinition> new_vars() : {
	Type type;
	VarDefinition v;
	List<VarDefinition> vars = new ArrayList<VarDefinition>();
}
{
	(type = type())
	v = new_var(type){vars.add(v);}
	(<COMMA>v = new_var(type){vars.add(v);})*
	<SEMICOLON>{return vars;}
}

/**	Retorna um objeto com o tipo selecionado, com base na KW encontrada
*	@return Um objeto com o tipo selecionado
*/
Type type() : {
	Token t;
}
{
	(
		(t = <KW_INT> {return new Type(TypeId.INTEGER);}) |
		(t = <KW_REAL> {return new Type(TypeId.REAL);}) |
		(t = <KW_CHAR> {return new Type(TypeId.CHAR);}) |
		(t = <KW_STRING> {return new Type(TypeId.STRING);}) |
		(t = <KW_BOOLEAN> {return new Type(TypeId.BOOLEAN);}) |
		(t = <KW_POINTER> {return new Type(TypeId.POINTER);}) |
		(t = <IDENTIFIER> {return new Type(TypeId.RECORD, t.image);})
	)
}

/**	Gera apenas uma VarDefinition já configurando cor interna e externa, tamanho e posição
*	@return Uma VarDefinition com a variável.
*/
VarDefinition new_var(Type type) : {
	Token t_name_var;
	Index i = null;
	Color color = null;
	Color colorOutside = null;
	Dimension dimension = null;
	Point posicao = null;
}
{
	(t_name_var = <IDENTIFIER>)
	(i = index())?
	(color = cor())?
	(colorOutside = corExterna())?
	(dimension = dimensao())?
	(posicao = posicao())?
	{
		return new VarDefinition(type, t_name_var.image, i, color, colorOutside, dimension, posicao);
	}
}

/**	Cria e retorna um objeto de cor interna para a variável
*	@return Um objeto Color com a cor da variável
*/
Color cor() : {
	Token t_value;
	int r=0;
	int g=0;
	int b=0;
}
{
	<KW_COLOR>
	<OPEN_PAR>
	(t_value = <INT_NUMBER>){
		r = Integer.parseInt(t_value.image);
	}
	(<COMMA>(t_value = <INT_NUMBER>){
		g = Integer.parseInt(t_value.image);
	})
	(<COMMA>(t_value = <INT_NUMBER>){
		b = Integer.parseInt(t_value.image);
	})
	<CLOSE_PAR>{return new Color(r,g,b);}
}

/**	Cria e retorna um objeto de cor a ser utilizado para a cor externa da variável
*	@return Um objeto Color com a cor externa da variável
*/
Color corExterna() : {
	Token t_value;
	int r=0;
	int g=0;
	int b=0;
}
{
	<KW_COLOR_INSIDE>
	<OPEN_PAR>
	(t_value = <INT_NUMBER>){
		r = Integer.parseInt(t_value.image);
	}
	(<COMMA>(t_value = <INT_NUMBER>){
		g = Integer.parseInt(t_value.image);
	})
	(<COMMA>(t_value = <INT_NUMBER>){
		b = Integer.parseInt(t_value.image);
	})
	<CLOSE_PAR>{return new Color(r,g,b);}
}

/**	Retorna um objeto Dimension com os dados do tamanho da variável na GUI
*	@return O objeto Dimension para formatar o tamanho da variável.
*/
Dimension dimensao() : {
	Token t_value;
	int largura=0;
	int altura=0;
}
{
	<KW_DIMENSION>
	<OPEN_PAR>
	(t_value = <INT_NUMBER>){
		largura = Integer.parseInt(t_value.image);
	}
	(<COMMA>(t_value = <INT_NUMBER>){
		altura = Integer.parseInt(t_value.image);
	})
	<CLOSE_PAR>{return new Dimension(largura,altura);}
}

/**
*   Cria uma string a partir do texto passado no roteiro
*/
String conteudo() : {  Token t_value;
}
{	<KW_CONTEUDO>
	<OPEN_PAR>
	(t_value = <STRING_LITERAL>)
	<CLOSE_PAR>{return t_value.image;}
}
/**
*   Cria um Point para posicionar o objeto na GUI, com base nos valores passados.
*   @return O objeto Point para ser utilizado no posicionamento da variável.
*/
Point posicao() : {
	Point coordenadas;
}
{
	<KW_POSITION>
	(coordenadas = coordenadas()){
		return coordenadas;
	}	  
}

/**
*   Cria um par de coordenadas x, y 
*/
Point coordenadas() : {	Token t_value;
	int x=0;
	int y=0;  
}
{	<OPEN_PAR>
	(t_value = <INT_NUMBER>){
		x = Integer.parseInt(t_value.image);
	}
	(<COMMA>(t_value = <INT_NUMBER>){
		y = Integer.parseInt(t_value.image);
	})
	<CLOSE_PAR>{return new Point(x,y);}
}

/**
*   Cria um tamanho de fonte (size) para formatação
*/
Integer font_size() : {  Integer tamanho;
}
{
	<KW_DIMENSION>
	<OPEN_PAR>
	(tamanho = size())
	<CLOSE_PAR>{return tamanho;}
}

/**	Cria e retorna um array ou matix.
*	@return Retorna um objeto Index (do pacote Gerador)
*/
Index index() : {
	Token t_value;
	Index result = new Index();
}
{
	<OPEN_BRACKET>
	(t_value = <INT_NUMBER>){
		result.first = Integer.parseInt(t_value.image);
	}
	(<COMMA>(t_value = <INT_NUMBER>){
		result.second = Integer.parseInt(t_value.image);
		result.isMatrix = true;
	})?
	<CLOSE_BRACKET>{return result;}
}

/**	Chama a classe CommandNewVar para todas as variáveis instanciadas em um comando para um Step.
*	@param Step atual sendo lido
*/
void cmd_new_var(Step p) : {
	List<VarDefinition> vars;
}
{
	vars = new_vars() {
		ListIterator<VarDefinition> i = vars.listIterator();
		while (i.hasNext()) {
			p.addCommand(new CommandNewVar(i.next()));
		}
	}
}

/**	Chama a classe atribuição para representação de atribuição de valor à uma variável
*	@param Step
*/
void cmd_atrib(Step p) : {
	Stack<Object> var_stack = new Stack<Object>();
	Stack<Object> pilhaSimbolos = new Stack<Object>();
}
{
	variavel(var_stack)
	<ATTRIBUTION>
	expression(pilhaSimbolos)
	<SEMICOLON> {
		p.addCommand(new CommandAttribution(var_stack, pilhaSimbolos));
	}
}

/**	Aponta o ponteiro para outra variavel, representando-se essa operacao por meio de uma seta de tamanho determinado
* apontada para uma direcao que pode ser cima, baixo, esquerda, direita
*	@param Step
*/
void cmd_direct_pointer(Step p) :{
  	Stack<Object> var_stack = new Stack<Object>();
	Point posicaoApontada;} 
{
	variavel(var_stack)
	<KW_POINT>
	(posicaoApontada = coordenadas())
	<SEMICOLON>	{
	  p.addCommand(new CommandDirectPointer(var_stack, posicaoApontada));	}
}

/**
*   Cria um tamanho escalar (size)
*/
Integer size() :
{	Token t_size;
}
{	t_size = <INT_NUMBER>	{	  return Integer.parseInt(t_size.image);
	}
}

/**
*   Coloca uma variável identificada na pilha de variáveis
*   @param Stack<Object> var_stac 
*/
void variavel(Stack<Object> var_stack) : {
	Token t_name;
	Index i;
}
{
	(t_name = <IDENTIFIER> {var_stack.push(t_name.image);})
	(
		(i = index() {var_stack.push(i);}) |
		(
			<DOT>
			(t_name = <IDENTIFIER> {var_stack.push(t_name.image);})
		)
	)*
}

/**
*   Retorna um literal (inteiro, numérico, string, char, boolena etc.)
*/
Object constant() : {
    Token sinal = null;
	Token constante;
}
{
  	(sinal = <ADD_OP> | sinal = <SUB_OP>)?
	(constante = <INT_NUMBER>) {
	  	if(sinal != null)
			return Integer.parseInt(sinal.image + constante.image);
		else
			return Integer.parseInt(constante.image);
	} |
	(sinal = <ADD_OP> | sinal = <SUB_OP>)?
	(constante = <FLOAT_NUMBER>) {
	  	if(sinal != null)
			return Double.parseDouble(sinal.image + constante.image);
		else
			return Double.parseDouble(constante.image);
	} |
	constante = <STRING_LITERAL> {
		return tratarString(constante.image);
	} |
	constante = <CHAR_LITERAL> {
		return tratarChar(constante.image);
	} |
	constante = <KW_TRUE> {
		return new Boolean(true);
	} |
	constante = <KW_FALSE> {
		return new Boolean(false);
	} |
	constante = <KW_NULL> {
		return null;
	}
}

/**	
*	Cria um novo arquivo adicionando-o no passo.
*   @param Step p
*/
void cmd_new_file(Step p) : {
	Token t_name;
}
{
	<KW_TEXT>
	(t_name = <IDENTIFIER> {p.addCommand(new CommandNewVarText(t_name.image));})
	(<COMMA>t_name = <IDENTIFIER> {p.addCommand(new CommandNewVarText(t_name.image));})*
	<SEMICOLON>
}

/**	
*	Declara uma nova função, colocando-a no passo.
*   @param Step p
*/
void function_declaration(Step p) : {
	Token t_name;
	Type type;
	List<VarDefinition> param;
	List<VarDefinition> local_vars;
}
{
	<KW_FUNCTION>
	(t_name = <IDENTIFIER>)
	<OPEN_PAR>
	(param = param_list())
	<CLOSE_PAR>
	<COLON>
	(type = function_type())
	(local_vars = local_vars_block()) {
		p.addCommand(new FunctionDeclaration(
			t_name.image, param, type, local_vars));
	}
}

/**	
*	Cria uma lista de variáveis a serem passadas como parâmetro.
*   @return List<VarDefinition> lista com definições de variáveis. 
*/
List<VarDefinition> param_list() : {
	List<VarDefinition> aux;
	List<VarDefinition> vars = new ArrayList<VarDefinition>();
}
{
	(
		aux = new_vars() {
			vars.addAll(aux);
		}
	)*
	{return vars;}
}

/**	
*	Possibilidades para o tipo de função.
*   @return Type tipo da função
*/
Type function_type() : {
	Token t;
}
{
	(
		(t = <KW_INT> {return new Type(TypeId.INTEGER);}) |
		(t = <KW_REAL> {return new Type(TypeId.REAL);}) |
		(t = <KW_CHAR> {return new Type(TypeId.CHAR);}) |
		(t = <KW_STRING> {return new Type(TypeId.STRING);}) |
		(t = <KW_BOOLEAN> {return new Type(TypeId.BOOLEAN);}) |
		(t = <KW_POINTER> {return new Type(TypeId.POINTER);}) |
		(t = <KW_VOID> {return new Type(TypeId.VOID);}) |
		(t = <IDENTIFIER> {return new Type(TypeId.RECORD, t.image);})
	)
}

/**	
*	Cria uma lista de variáveis locais a uma função.
*   @return List<VarDefinition> lista de variáveis locais a uma função.
*/
List<VarDefinition> local_vars_block() : {
	List<VarDefinition> vars = new ArrayList<VarDefinition>();
	List<VarDefinition> aux;
}
{
	(
		<SEMICOLON> |
		
		(
			<OPEN_BRACE>
			(
				aux = new_vars() {
					vars.addAll(aux);
				}
			)*
			<CLOSE_BRACE>
			<SEMICOLON>
		)
	)
	{return vars;}
}

/**	
*	Cria um comando de inicialização de uma função, adicionando-o ao passo.
*   @param Step p
*/
void function_start(Step p) : {
	Token t;
	List<Object> args;
}
{
	<KW_START>
	(t = <IDENTIFIER>)
	(args = lst_args())
	<SEMICOLON>
	{p.addCommand(new CommandStartFunction(t.image, args));}
}

/**
*   Cria um comando para finalizar uma função, adicionando-o ao passo. 
*	@param Step p
*/
void function_end(Step p) : {
	Token t;
}
{
	<KW_END>
	<SEMICOLON>
	{p.addCommand(new CommandEndFunction());}
}

/**	
*	Chama um comando de operação de sistema e adiciona-a ao passo. 
*   @param Step p
*/
void operation_call(Step p) : {
	Token cmd;
	List<Object> args;
}
{
	(cmd = operation())
	(args = lst_args())
	<SEMICOLON>{
		p.addCommand(new CommandOperationCall(cmd, args));
	}
}

/**	
*	Define os tipos de operação do sistema (escreve no console, escreve em nova linha do
*   console, comentário, som, etc.).
*   @return Token tipo de operação de sistema.
*/
Token operation() : {
	Token cmd;
}
{
	((cmd = <KW_WRITE>) |
	(cmd = <KW_WRITELN>) |
	(cmd = <KW_COMMENT>) |
	(cmd = <KW_SOUND>) |
	(cmd = <KW_ASSIGN>) |
	(cmd = <KW_RESET>) |
	(cmd = <KW_REWRITE>) |
	(cmd = <KW_READ>) |
	(cmd = <KW_READLN>) |
	(cmd = <KW_CLOSE>)){return cmd;}
}

/**	
*	Cria uma lista de argumentos passados para uma função.
*   @return List<Object> lista de argumentos passados para a função.
*/
List<Object> lst_args() : {
	Object a;
	List<Object> result = new ArrayList<Object>();
}
{
	<OPEN_PAR>	
	  (a = arg(){result.add(a);})?		  (<COMMA>(a = arg()){result.add(a);})*
	<CLOSE_PAR>{
		return result;
	}
}

/**	
*	Cria o argumento de uma função (variável, constante ou variável.
*   @return Object
*/
Object arg() : {
	Object o;
	Stack<Object> var_stack = new Stack<Object>();
}
{
	variavel(var_stack){return var_stack;} |
	(o = constant()){return o;} |
	<KW_ENDERECO> variavel(var_stack){return var_stack;}
}

/**	
*	Define um conjunto de comandos (bloco de comandos) para adicionar ao passo. Afinal, um
*   passo pode possuir um comando, ou uma lista de comandos.
*   @param Step p.
*/
void bloco(Step p) : {} {
	<OPEN_BRACE>(command(p))*<CLOSE_BRACE>
}

// Pula espaços em branco e comentários
SKIP : {
	" " |
	"\t" |
	"\n" |
	"\r" |
	"\f" |
	<COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")?>}

// Algumas expressões regulares auxiliares
TOKEN : {
	<#DIGIT : (["0"-"9"])> |
	<#DIGITS : (<DIGIT>)+> |
	<#LETTER : ["a"-"z", "A"-"Z", "_"]> |
	<#LETTERDIGIT : <LETTER> | <DIGIT>> |
	<#SCAPE_SEQUENCE : "\\"("\\" | "t" | "n"| "r")>}

// Palavras-chave
TOKEN [IGNORE_CASE] : {
	<KW_LINE : "line"> |
	<KW_RECORD : "record"> |
	<KW_INT : "int"> |
	<KW_REAL : "real"> |
	<KW_CHAR : "char"> |
	<KW_STRING : "string"> |
	<KW_BOOLEAN : "boolean"> |
	<KW_POINTER : "pointer"> |
	<KW_VOID : "void"> |
	<KW_TEXT : "text">  |
	<KW_WRITE : "write"> |
	<KW_WRITELN : "writeln"> |
	<KW_COMMENT : "comenta"> |
	<KW_SOUND : "som"> |
	<KW_ASSIGN : "assign"> |
	<KW_REWRITE : "rewrite"> |
	<KW_RESET : "reset"> |
	<KW_READ : "read"> |
	<KW_READLN : "readln"> |
	<KW_CLOSE : "close"> |
	<KW_FUNCTION : "function"> |
	<KW_START : "start"> |
	<KW_END : "end"> |
	<KW_TRUE : "true"> |
	<KW_FALSE : "false"> |
	<KW_NULL : "null"> |
	<KW_POINT : "aponta"> |
	<KW_COLOR : "cor"> |
	<KW_COLOR_INSIDE : "corexterna"> |
	<KW_DIMENSION : "tamanho"> |
	<KW_POSITION : "posicao"> |
	<KW_INSERE_TEXTO : "insere_texto"> |
	<KW_CONTEUDO : "conteudo"> |
	<KW_ENDERECO : "endereco"> |
	<KW_GOTO : "vaipara"> |
	<KW_READ_FROM_USER : "recebe"> |
	<KW_IF : "se" >
	}
	
// Constantes
TOKEN : {
	<INT_NUMBER : (<DIGITS>)> |
	<IDENTIFIER : (<LETTER>)(<LETTERDIGIT>)*> |
	<FLOAT_NUMBER : (<DIGIT>)*"."(<DIGITS>)> |
	<STRING_LITERAL : "\""((~["\"", "\r", "\n", "\\"]) | <SCAPE_SEQUENCE> | "\\\"")*"\""> |
	<CHAR_LITERAL : "'"((~["'", "\r", "\n", "\\"]) | <SCAPE_SEQUENCE> | "\\'")"'">}

// Pontuação
TOKEN : {
	<OPEN_BRACE : "{"> |
	<CLOSE_BRACE : "}"> |
	<OPEN_BRACKET : "["> |
	<CLOSE_BRACKET : "]"> |
	<OPEN_PAR : "("> |
	<CLOSE_PAR : ")"> |
	<DOT : "."> |
	<COMMA : ","> |
	<COLON : ":"> |
	<SEMICOLON : ";"> |
	<ATTRIBUTION : "=">}

// Operadores
TOKEN : {	<OR_OP: "||" > |
	<AND_OP: "&&" > |
	<EQ_OP: "==" > |
	<NE_OP: "!=" > |
	<LT_OP: "<" > |
	<GT_OP: ">" > |
	<LE_OP: "<=" > |
	<GE_OP: ">=" > |
	<NOT_OP: "!" > |
	<ADD_OP: "+" > |
	<SUB_OP: "-" > |
	<MULT_OP: "*" > |
	<DIV_OP: "/" > |
	<MOD_OP: "%" >}