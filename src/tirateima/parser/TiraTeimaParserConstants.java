/* Generated By:JavaCC: Do not edit this line. TiraTeimaParserConstants.java */
package tirateima.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TiraTeimaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int DIGITS = 8;
  /** RegularExpression Id. */
  int LETTER = 9;
  /** RegularExpression Id. */
  int LETTERDIGIT = 10;
  /** RegularExpression Id. */
  int SCAPE_SEQUENCE = 11;
  /** RegularExpression Id. */
  int KW_LINE = 12;
  /** RegularExpression Id. */
  int KW_RECORD = 13;
  /** RegularExpression Id. */
  int KW_INT = 14;
  /** RegularExpression Id. */
  int KW_REAL = 15;
  /** RegularExpression Id. */
  int KW_CHAR = 16;
  /** RegularExpression Id. */
  int KW_STRING = 17;
  /** RegularExpression Id. */
  int KW_BOOLEAN = 18;
  /** RegularExpression Id. */
  int KW_POINTER = 19;
  /** RegularExpression Id. */
  int KW_VOID = 20;
  /** RegularExpression Id. */
  int KW_TEXT = 21;
  /** RegularExpression Id. */
  int KW_WRITE = 22;
  /** RegularExpression Id. */
  int KW_WRITELN = 23;
  /** RegularExpression Id. */
  int KW_COMMENT = 24;
  /** RegularExpression Id. */
  int KW_SOUND = 25;
  /** RegularExpression Id. */
  int KW_ASSIGN = 26;
  /** RegularExpression Id. */
  int KW_REWRITE = 27;
  /** RegularExpression Id. */
  int KW_RESET = 28;
  /** RegularExpression Id. */
  int KW_READ = 29;
  /** RegularExpression Id. */
  int KW_READLN = 30;
  /** RegularExpression Id. */
  int KW_CLOSE = 31;
  /** RegularExpression Id. */
  int KW_FUNCTION = 32;
  /** RegularExpression Id. */
  int KW_START = 33;
  /** RegularExpression Id. */
  int KW_END = 34;
  /** RegularExpression Id. */
  int KW_TRUE = 35;
  /** RegularExpression Id. */
  int KW_FALSE = 36;
  /** RegularExpression Id. */
  int KW_NULL = 37;
  /** RegularExpression Id. */
  int KW_POINT = 38;
  /** RegularExpression Id. */
  int KW_COLOR = 39;
  /** RegularExpression Id. */
  int KW_COLOR_INSIDE = 40;
  /** RegularExpression Id. */
  int KW_DIMENSION = 41;
  /** RegularExpression Id. */
  int KW_POSITION = 42;
  /** RegularExpression Id. */
  int KW_INSERE_TEXTO = 43;
  /** RegularExpression Id. */
  int KW_CONTEUDO = 44;
  /** RegularExpression Id. */
  int KW_ENDERECO = 45;
  /** RegularExpression Id. */
  int KW_GOTO = 46;
  /** RegularExpression Id. */
  int KW_READ_FROM_USER = 47;
  /** RegularExpression Id. */
  int KW_IF = 48;
  /** RegularExpression Id. */
  int KW_REMOVE_VAR = 49;
  /** RegularExpression Id. */
  int INT_NUMBER = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;
  /** RegularExpression Id. */
  int FLOAT_NUMBER = 52;
  /** RegularExpression Id. */
  int STRING_LITERAL = 53;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 54;
  /** RegularExpression Id. */
  int OPEN_BRACE = 55;
  /** RegularExpression Id. */
  int CLOSE_BRACE = 56;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 57;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 58;
  /** RegularExpression Id. */
  int OPEN_PAR = 59;
  /** RegularExpression Id. */
  int CLOSE_PAR = 60;
  /** RegularExpression Id. */
  int DOT = 61;
  /** RegularExpression Id. */
  int COMMA = 62;
  /** RegularExpression Id. */
  int COLON = 63;
  /** RegularExpression Id. */
  int SEMICOLON = 64;
  /** RegularExpression Id. */
  int ATTRIBUTION = 65;
  /** RegularExpression Id. */
  int OR_OP = 66;
  /** RegularExpression Id. */
  int AND_OP = 67;
  /** RegularExpression Id. */
  int EQ_OP = 68;
  /** RegularExpression Id. */
  int NE_OP = 69;
  /** RegularExpression Id. */
  int LT_OP = 70;
  /** RegularExpression Id. */
  int GT_OP = 71;
  /** RegularExpression Id. */
  int LE_OP = 72;
  /** RegularExpression Id. */
  int GE_OP = 73;
  /** RegularExpression Id. */
  int NOT_OP = 74;
  /** RegularExpression Id. */
  int ADD_OP = 75;
  /** RegularExpression Id. */
  int SUB_OP = 76;
  /** RegularExpression Id. */
  int MULT_OP = 77;
  /** RegularExpression Id. */
  int DIV_OP = 78;
  /** RegularExpression Id. */
  int MOD_OP = 79;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<COMMENT>",
    "<DIGIT>",
    "<DIGITS>",
    "<LETTER>",
    "<LETTERDIGIT>",
    "<SCAPE_SEQUENCE>",
    "\"line\"",
    "\"record\"",
    "\"int\"",
    "\"real\"",
    "\"char\"",
    "\"string\"",
    "\"boolean\"",
    "\"pointer\"",
    "\"void\"",
    "\"text\"",
    "\"write\"",
    "\"writeln\"",
    "\"comenta\"",
    "\"som\"",
    "\"assign\"",
    "\"rewrite\"",
    "\"reset\"",
    "\"read\"",
    "\"readln\"",
    "\"close\"",
    "\"function\"",
    "\"start\"",
    "\"end\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"aponta\"",
    "\"cor\"",
    "\"corexterna\"",
    "\"tamanho\"",
    "\"posicao\"",
    "\"insere_texto\"",
    "\"conteudo\"",
    "\"endereco\"",
    "\"vaipara\"",
    "\"recebe\"",
    "\"se\"",
    "\"removeVariavel\"",
    "<INT_NUMBER>",
    "<IDENTIFIER>",
    "<FLOAT_NUMBER>",
    "<STRING_LITERAL>",
    "<CHAR_LITERAL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"=\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
  };

}
