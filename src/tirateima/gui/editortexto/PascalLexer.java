package tirateima.gui.editortexto;

/* The following code was generated by JFlex 1.4.1 on 21/08/08 23:20 */

/* Lexer para pascal do tirateima */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 21/08/08 23:20 from the specification file
 * <tt>tirateima.flex</tt>
 */
@SuppressWarnings("unused")
public class PascalLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int IDENTIFIER = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\6\0\1\35"+
    "\1\36\1\40\1\37\1\45\1\44\1\45\1\43\1\0\12\5\1\44"+
    "\1\44\5\0\1\6\1\13\1\17\1\10\1\14\1\26\1\15\1\33"+
    "\1\16\1\4\1\32\1\25\1\30\1\7\1\21\1\31\1\4\1\11"+
    "\1\20\1\22\1\27\1\23\1\24\1\34\1\12\1\4\1\44\1\0"+
    "\1\44\1\0\1\4\1\0\1\6\1\13\1\17\1\10\1\14\1\26"+
    "\1\15\1\33\1\16\1\4\1\32\1\25\1\30\1\7\1\21\1\31"+
    "\1\4\1\11\1\20\1\22\1\27\1\23\1\24\1\34\1\12\1\4"+
    "\1\41\1\0\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\23\3\1\5"+
    "\2\1\1\6\1\7\2\10\1\11\1\12\1\13\2\0"+
    "\5\3\1\14\10\3\1\15\1\16\7\3\1\17\1\3"+
    "\1\20\16\3\1\21\1\22\2\4\1\0\1\23\1\3"+
    "\1\24\1\25\1\26\10\3\1\27\10\3\1\30\5\3"+
    "\1\31\6\3\1\32\2\3\1\33\5\3\1\34\2\3"+
    "\1\35\2\3\1\36\1\3\1\37\1\3\1\40\1\3"+
    "\1\41\1\42\3\3\1\43\1\44\1\45\1\46\3\3"+
    "\1\47\5\3\1\50\4\3\1\51\3\3\1\52\3\3"+
    "\1\53\1\54\2\3\1\55\3\3\1\56\1\57\1\60"+
    "\1\61\3\3\1\62\1\63\3\3\1\64\2\3\1\65"+
    "\1\3\1\66\1\3\1\67\1\3\1\70\1\3\1\71"+
    "\1\72\1\73\1\3\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\114\0\162\0\114\0\230\0\276"+
    "\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\114\0\u03dc\0\u0402\0\114"+
    "\0\114\0\u0428\0\114\0\u044e\0\114\0\114\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\276"+
    "\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\276"+
    "\0\u0804\0\276\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8"+
    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18"+
    "\0\114\0\114\0\u0a3e\0\u0a64\0\u0a64\0\276\0\u0a8a\0\276"+
    "\0\276\0\276\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\276\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\276\0\u0d10\0\u0d36\0\u0d5c\0\u0d82"+
    "\0\u0da8\0\276\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c"+
    "\0\276\0\u0eb2\0\u0ed8\0\276\0\u0efe\0\u0f24\0\u0f4a\0\u0f70"+
    "\0\u0f96\0\276\0\u0fbc\0\u0fe2\0\276\0\u1008\0\u102e\0\276"+
    "\0\u1054\0\276\0\u107a\0\276\0\u10a0\0\276\0\276\0\u10c6"+
    "\0\u10ec\0\u1112\0\276\0\276\0\276\0\276\0\u1138\0\u115e"+
    "\0\u1184\0\276\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\276"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\276\0\u1300\0\u1326\0\u134c"+
    "\0\276\0\u1372\0\u1398\0\u13be\0\276\0\276\0\u13e4\0\u140a"+
    "\0\276\0\u1430\0\u1456\0\u147c\0\276\0\276\0\276\0\276"+
    "\0\u14a2\0\u14c8\0\u14ee\0\276\0\276\0\u1514\0\u153a\0\u1560"+
    "\0\276\0\u1586\0\u15ac\0\276\0\u15d2\0\276\0\u15f8\0\276"+
    "\0\u161e\0\276\0\u1644\0\276\0\276\0\276\0\u166a\0\276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\10\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\3\10\1\35\1\36\1\37\1\4\1\40"+
    "\1\41\1\42\1\43\1\4\1\44\2\45\32\44\1\46"+
    "\10\44\50\0\1\6\46\0\1\7\46\0\31\10\16\0"+
    "\1\11\6\0\1\47\26\0\1\50\6\0\3\10\1\51"+
    "\1\10\1\52\23\10\15\0\12\10\1\53\2\10\1\54"+
    "\13\10\15\0\12\10\1\55\2\10\1\56\13\10\15\0"+
    "\10\10\1\57\20\10\15\0\6\10\1\60\1\10\1\61"+
    "\4\10\1\62\13\10\15\0\3\10\1\63\15\10\1\64"+
    "\6\10\1\65\15\0\15\10\1\66\13\10\15\0\3\10"+
    "\1\67\16\10\1\70\6\10\15\0\2\10\1\71\12\10"+
    "\1\72\11\10\1\73\1\10\15\0\10\10\1\74\1\10"+
    "\1\75\3\10\1\76\10\10\1\77\1\10\15\0\22\10"+
    "\1\100\6\10\15\0\6\10\1\101\6\10\1\102\11\10"+
    "\1\103\1\10\15\0\2\10\1\104\26\10\15\0\12\10"+
    "\1\105\2\10\1\106\11\10\1\107\1\10\15\0\2\10"+
    "\1\110\12\10\1\111\13\10\15\0\12\10\1\112\2\10"+
    "\1\113\5\10\1\114\5\10\15\0\3\10\1\115\25\10"+
    "\15\0\15\10\1\116\13\10\15\0\2\10\1\117\2\10"+
    "\1\120\23\10\50\0\1\121\46\0\1\122\12\0\1\123"+
    "\35\0\1\43\2\0\1\44\2\0\32\44\1\0\10\44"+
    "\5\0\1\124\37\0\1\125\5\0\1\123\44\0\4\10"+
    "\1\126\24\10\15\0\5\10\1\127\23\10\15\0\21\10"+
    "\1\130\7\10\15\0\16\10\1\131\12\10\15\0\17\10"+
    "\1\132\11\10\15\0\20\10\1\133\2\10\1\134\5\10"+
    "\15\0\2\10\1\135\10\10\1\136\11\10\1\137\3\10"+
    "\15\0\16\10\1\140\12\10\15\0\11\10\1\141\17\10"+
    "\15\0\15\10\1\142\13\10\15\0\4\10\1\143\24\10"+
    "\15\0\14\10\1\144\14\10\15\0\16\10\1\145\12\10"+
    "\15\0\16\10\1\146\12\10\15\0\16\10\1\147\12\10"+
    "\15\0\14\10\1\150\14\10\15\0\3\10\1\151\20\10"+
    "\1\152\4\10\15\0\2\10\1\153\26\10\15\0\16\10"+
    "\1\154\12\10\15\0\3\10\1\155\25\10\15\0\5\10"+
    "\1\156\23\10\15\0\15\10\1\157\13\10\15\0\25\10"+
    "\1\160\3\10\15\0\10\10\1\161\20\10\15\0\5\10"+
    "\1\162\23\10\15\0\16\10\1\163\12\10\15\0\5\10"+
    "\1\164\23\10\15\0\12\10\1\165\16\10\15\0\7\10"+
    "\1\166\21\10\15\0\3\10\1\167\25\10\15\0\21\10"+
    "\1\170\7\10\15\0\5\10\1\171\23\10\15\0\3\10"+
    "\1\172\25\10\15\0\16\10\1\173\12\10\15\0\4\10"+
    "\1\174\24\10\15\0\13\10\1\175\15\10\15\0\15\10"+
    "\1\176\13\10\16\0\1\123\6\0\1\47\36\0\1\124"+
    "\44\0\2\10\1\177\26\10\15\0\3\10\1\200\25\10"+
    "\15\0\7\10\1\201\21\10\15\0\21\10\1\202\7\10"+
    "\15\0\15\10\1\203\13\10\15\0\10\10\1\204\20\10"+
    "\15\0\10\10\1\205\20\10\15\0\12\10\1\206\16\10"+
    "\15\0\21\10\1\207\7\10\15\0\10\10\1\210\20\10"+
    "\15\0\10\10\1\211\20\10\15\0\15\10\1\212\13\10"+
    "\15\0\10\10\1\213\20\10\15\0\10\10\1\214\20\10"+
    "\15\0\14\10\1\215\14\10\15\0\25\10\1\216\3\10"+
    "\15\0\5\10\1\217\23\10\15\0\11\10\1\220\17\10"+
    "\15\0\12\10\1\221\16\10\15\0\5\10\1\222\23\10"+
    "\15\0\10\10\1\223\20\10\15\0\3\10\1\224\25\10"+
    "\15\0\27\10\1\225\1\10\15\0\4\10\1\226\24\10"+
    "\15\0\21\10\1\227\7\10\15\0\10\10\1\230\20\10"+
    "\15\0\11\10\1\231\17\10\15\0\10\10\1\232\20\10"+
    "\15\0\13\10\1\233\15\10\15\0\12\10\1\234\16\10"+
    "\15\0\26\10\1\235\2\10\15\0\11\10\1\236\1\10"+
    "\1\237\15\10\15\0\6\10\1\240\22\10\15\0\16\10"+
    "\1\241\12\10\15\0\21\10\1\242\7\10\15\0\5\10"+
    "\1\243\23\10\15\0\2\10\1\244\26\10\15\0\3\10"+
    "\1\245\25\10\15\0\10\10\1\246\20\10\15\0\3\10"+
    "\1\247\25\10\15\0\11\10\1\250\17\10\15\0\16\10"+
    "\1\251\12\10\15\0\21\10\1\252\7\10\15\0\3\10"+
    "\1\253\25\10\15\0\16\10\1\254\12\10\15\0\10\10"+
    "\1\255\20\10\15\0\21\10\1\256\7\10\15\0\12\10"+
    "\1\257\16\10\15\0\16\10\1\260\12\10\15\0\21\10"+
    "\1\261\7\10\15\0\10\10\1\262\20\10\15\0\5\10"+
    "\1\263\23\10\15\0\10\10\1\264\20\10\15\0\15\10"+
    "\1\265\13\10\15\0\10\10\1\266\20\10\15\0\4\10"+
    "\1\267\24\10\15\0\16\10\1\270\12\10\15\0\2\10"+
    "\1\271\26\10\15\0\4\10\1\272\24\10\15\0\10\10"+
    "\1\273\20\10\15\0\10\10\1\274\20\10\15\0\11\10"+
    "\1\275\17\10\15\0\12\10\1\276\16\10\15\0\3\10"+
    "\1\277\25\10\15\0\12\10\1\300\16\10\15\0\4\10"+
    "\1\301\24\10\15\0\2\10\1\302\26\10\15\0\4\10"+
    "\1\303\24\10\15\0\3\10\1\304\25\10\15\0\10\10"+
    "\1\305\20\10\15\0\5\10\1\306\23\10\15\0\3\10"+
    "\1\307\25\10\15\0\16\10\1\310\12\10\15\0\15\10"+
    "\1\311\13\10\15\0\24\10\1\312\4\10\15\0\23\10"+
    "\1\313\5\10\15\0\4\10\1\314\24\10\15\0\16\10"+
    "\1\315\12\10\15\0\3\10\1\316\25\10\15\0\5\10"+
    "\1\317\23\10\15\0\10\10\1\320\20\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\11\1\1\1\11\26\1\1\11\2\1"+
    "\2\11\1\1\1\11\1\1\2\11\2\0\50\1\2\11"+
    "\2\1\1\0\173\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer string = new StringBuffer();
  
  private Token2 token(int type) {
    return new Token2(type, yytext());
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PascalLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PascalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token2 yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return token(Token2.BYTE);
          }
        case 61: break;
        case 47: 
          { return token(Token2.DOUBLE);
          }
        case 62: break;
        case 42: 
          { return token(Token2.CONST);
          }
        case 63: break;
        case 58: 
          { return token(Token2.SHORTINT);
          }
        case 64: break;
        case 33: 
          { return token(Token2.COMP);
          }
        case 65: break;
        case 28: 
          { return token(Token2.REAL);
          }
        case 66: break;
        case 3: 
          { return token(Token2.IDENTIFIER);
          }
        case 67: break;
        case 39: 
          { return token(Token2.FILE);
          }
        case 68: break;
        case 31: 
          { return token(Token2.GOTO);
          }
        case 69: break;
        case 18: 
          { return token(Token2.ENDCOMMENT_PAR);
          }
        case 70: break;
        case 10: 
          { yybegin(YYINITIAL); string.append(yytext()); return new Token2(Token2.BAD_STRING, string.toString());
          }
        case 71: break;
        case 50: 
          { return token(Token2.SINGLE);
          }
        case 72: break;
        case 51: 
          { return token(Token2.STRING_TP);
          }
        case 73: break;
        case 15: 
          { return token(Token2.OF);
          }
        case 74: break;
        case 16: 
          { return token(Token2.TO);
          }
        case 75: break;
        case 44: 
          { return token(Token2.LABEL);
          }
        case 76: break;
        case 23: 
          { return token(Token2.END);
          }
        case 77: break;
        case 60: 
          { return token(Token2.PROCEDURE);
          }
        case 78: break;
        case 2: 
          { return token(Token2.EOLINE);
          }
        case 79: break;
        case 41: 
          { return token(Token2.BEGIN);
          }
        case 80: break;
        case 17: 
          { return token(Token2.BEGINCOMMENT_PAR);
          }
        case 81: break;
        case 52: 
          { return token(Token2.PACKED);
          }
        case 82: break;
        case 7: 
          { return token(Token2.ENDCOMMENT_CH);
          }
        case 83: break;
        case 21: 
          { return token(Token2.NOT);
          }
        case 84: break;
        case 19: 
          { return token(Token2.AND);
          }
        case 85: break;
        case 49: 
          { return token(Token2.REPEAT);
          }
        case 86: break;
        case 22: 
          { return token(Token2.DIV);
          }
        case 87: break;
        case 40: 
          { return token(Token2.ARRAY);
          }
        case 88: break;
        case 54: 
          { return token(Token2.INTEGER);
          }
        case 89: break;
        case 27: 
          { return token(Token2.MOD);
          }
        case 90: break;
        case 53: 
          { return token(Token2.BOOLEAN);
          }
        case 91: break;
        case 35: 
          { return token(Token2.TYPE);
          }
        case 92: break;
        case 32: 
          { return token(Token2.CASE);
          }
        case 93: break;
        case 43: 
          { return token(Token2.WHILE);
          }
        case 94: break;
        case 12: 
          { return token(Token2.DO);
          }
        case 95: break;
        case 30: 
          { return token(Token2.ELSE);
          }
        case 96: break;
        case 11: 
          { yybegin(YYINITIAL); string.append("'"); return new Token2(Token2.STRING, string.toString());
          }
        case 97: break;
        case 9: 
          { string.append(yytext());
          }
        case 98: break;
        case 4: 
          { return token(Token2.NUM);
          }
        case 99: break;
        case 57: 
          { return token(Token2.EXTENDED);
          }
        case 100: break;
        case 36: 
          { return token(Token2.THEN);
          }
        case 101: break;
        case 6: 
          { return token(Token2.BEGINCOMMENT_CH);
          }
        case 102: break;
        case 25: 
          { return token(Token2.VAR);
          }
        case 103: break;
        case 45: 
          { return token(Token2.UNTIL);
          }
        case 104: break;
        case 8: 
          { return token(Token2.PONT);
          }
        case 105: break;
        case 1: 
          { return token(Token2.OTHER);
          }
        case 106: break;
        case 5: 
          { string.setLength(0); string.append("'"); yybegin(STRING);
          }
        case 107: break;
        case 14: 
          { return token(Token2.IF);
          }
        case 108: break;
        case 56: 
          { return token(Token2.PROGRAM);
          }
        case 109: break;
        case 48: 
          { return token(Token2.RECORD);
          }
        case 110: break;
        case 55: 
          { return token(Token2.LONGINT);
          }
        case 111: break;
        case 38: 
          { return token(Token2.WORD);
          }
        case 112: break;
        case 37: 
          { return token(Token2.WITH);
          }
        case 113: break;
        case 34: 
          { return token(Token2.CHAR);
          }
        case 114: break;
        case 13: 
          { return token(Token2.IN);
          }
        case 115: break;
        case 59: 
          { return token(Token2.FUNCTION);
          }
        case 116: break;
        case 26: 
          { return token(Token2.FOR);
          }
        case 117: break;
        case 46: 
          { return token(Token2.DOWNTO);
          }
        case 118: break;
        case 20: 
          { return token(Token2.NIL);
          }
        case 119: break;
        case 24: 
          { return token(Token2.SET);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return token(Token2.EOB);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
